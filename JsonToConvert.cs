// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CodeBeautify;
//
//    var welcome10 = Welcome10.FromJson(jsonString);

namespace CodeBeautify
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome10
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("category")]
        public string Category { get; set; }

        [JsonProperty("name")]
        public Name Name { get; set; }

        [JsonProperty("color")]
        public string Color { get; set; }

        [JsonProperty("status")]
        public Status Status { get; set; }

        [JsonProperty("infoBlocks")]
        public InfoBlock[] InfoBlocks { get; set; }
    }

    public partial class InfoBlock
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("title")]
        public Title Title { get; set; }

        [JsonProperty("elements", NullValueHandling = NullValueHandling.Ignore)]
        public Element[] Elements { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public Name Text { get; set; }
    }

    public partial class Element
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("key", NullValueHandling = NullValueHandling.Ignore)]
        public Name Key { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Value? Value { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Name Name { get; set; }

        [JsonProperty("formatted", NullValueHandling = NullValueHandling.Ignore)]
        public Formatted Formatted { get; set; }

        [JsonProperty("min", NullValueHandling = NullValueHandling.Ignore)]
        public double? Min { get; set; }

        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public double? Max { get; set; }
    }

    public partial class Formatted
    {
        [JsonProperty("value")]
        public Lines Value { get; set; }

        [JsonProperty("nameColor")]
        public string NameColor { get; set; }

        [JsonProperty("valueColor")]
        public string ValueColor { get; set; }
    }

    public partial class Lines
    {
        [JsonProperty("ru")]
        public string Ru { get; set; }

        [JsonProperty("en")]
        public string En { get; set; }
    }

    public partial class Name
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("key", NullValueHandling = NullValueHandling.Ignore)]
        public string Key { get; set; }

        [JsonProperty("args", NullValueHandling = NullValueHandling.Ignore)]
        public Args Args { get; set; }

        [JsonProperty("lines", NullValueHandling = NullValueHandling.Ignore)]
        public Lines Lines { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }
    }

    public partial class Args
    {
    }

    public partial class Title
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class Status
    {
        [JsonProperty("state")]
        public string State { get; set; }
    }

    public enum TypeEnum { Text, Translation };

    public partial struct Value
    {
        public double? Double;
        public Name Name;

        public static implicit operator Value(double Double) => new Value { Double = Double };
        public static implicit operator Value(Name Name) => new Value { Name = Name };
    }

    public partial class Welcome10
    {
        public static Welcome10 FromJson(string json) => JsonConvert.DeserializeObject<Welcome10>(json, CodeBeautify.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome10 self) => JsonConvert.SerializeObject(self, CodeBeautify.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                ValueConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "text":
                    return TypeEnum.Text;
                case "translation":
                    return TypeEnum.Translation;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Text:
                    serializer.Serialize(writer, "text");
                    return;
                case TypeEnum.Translation:
                    serializer.Serialize(writer, "translation");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class ValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Value) || t == typeof(Value?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Value { Double = doubleValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Name>(reader);
                    return new Value { Name = objectValue };
            }
            throw new Exception("Cannot unmarshal type Value");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Value)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Name != null)
            {
                serializer.Serialize(writer, value.Name);
                return;
            }
            throw new Exception("Cannot marshal type Value");
        }

        public static readonly ValueConverter Singleton = new ValueConverter();
    }
}
